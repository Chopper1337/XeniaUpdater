using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Windows.Forms;

namespace XeniaUpdater_C
{
    class Helper
    {
        //Gets the current name of the executable, for the chance that it could be renamed
        string currentExecutableFullPathName = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;
        string currentExecutableName = System.Diagnostics.Process.GetCurrentProcess().MainModule.ModuleName;

        public Helper()
        {

        }

        //Creates the tree of folders for the different builds to be included in the updater
        public void CreateFolders()
        {
            try
            {
                Directory.CreateDirectory("XeniaMaster");
                Directory.CreateDirectory("XeniaMaster/LastUpdate");
                Directory.CreateDirectory("XeniaCanary");
                Directory.CreateDirectory("XeniaCanary/LastUpdate");
                Directory.CreateDirectory("XeniaCanary_PR");
                Directory.CreateDirectory("XeniaCanary_PR/LastUpdate");
                Directory.CreateDirectory("XeniaCanary_Ex");
                Directory.CreateDirectory("XeniaCanary_Ex/LastUpdate");
            }
            catch
            {

            }
        }

        //Downloads a file from a URL to a path with the file name you specify
        //Returns true if file downloads and false otherwise
        public bool DownloadFile(string downloadURL, string fileName, string folderName)
        {
            int percentInt = 0;
            string percentString;
            WebClient wc = new WebClient();

                wc.DownloadFileAsync(new Uri(downloadURL), $"{folderName}/{fileName}");
                wc.DownloadProgressChanged += new DownloadProgressChangedEventHandler(wc_DownloadProgressChanged);
                wc.Dispose();

            void wc_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)
            {
                if(e.ProgressPercentage == 100)
                {
                    return;
                }
                else
                {
                    
                }
            }

            return true;
        }

        //Extracts the zip
        public void ExtractBuild(string folderName, string zipName)
        {
            try
            {
                ZipFile.ExtractToDirectory(zipName, folderName);
            }
            catch (Exception)
            {
                MessageBox.Show("Error extracting ZIP, please be sure of the following:\n1. Xenia is not running.\n2. You have the correct permissions for this folder", "Error");
            }
        }

        //Cleanup tasks to do before download and extraction of a new version
        public void PreUpdateTask(string folderName, string OldXeniaZip, string ZipToBackup, string PDBName, string ExecutableName)
        {
            try
            {
                File.Delete($"{folderName}/{OldXeniaZip}");
                File.Move($"{folderName}/{ZipToBackup}", $"{folderName}/{ZipToBackup}_old.zip");
                File.Delete($"{folderName}/LICENSE");
                File.Delete($"{folderName}/xenia.log");
                File.Delete($"{folderName}/{ExecutableName}.exe");
                File.Delete($"{folderName}/{PDBName}.pdb");
            }
            catch (Exception)
            {

            }
        }

        //Start Xenia, check if keep open button is checked
        public void StartProcess(string ExecutableName, string ExeLocation, bool boxTicked)
        {
            Process.Start($"{ExeLocation}/{ExecutableName}");
            if (!boxTicked)
            {
                Form1 f1 = new Form1();
                f1.Close();
            }
        }

        //Updates XeniaUpdater
        public void UpdateXeniaUpdater(string updaterBranch)
        {
            WebClient wc = new WebClient();
            wc.DownloadFileAsync(new Uri("https://github.com/Chopper1337/XeniaUpdater/raw/main/bin/" + updaterBranch + "/XeniaUpdater.exe"), "XeniaUpdater.Latest.exe");

            if (File.Exists($"XeniaUpdater.Latest.exe"))
            {
                MessageBox.Show($"Latest version downloaded, please restart!", "Latest version downloaded :)");

                using (FileStream strm = File.Create("UpdateDownloaded.bat"))
                using (StreamWriter sw = new StreamWriter(strm))
                {
                    sw.WriteLine(
                        "@echo off\n" +
                        $"rem File generated by {currentExecutableName} (XeniaUpdater), do not modify or delete :)\n" +
                        "echo Updating Xenia Updater :)\n" +
                        "timeout 2\n" +
                        $"del \"{currentExecutableFullPathName}\"\n" +
                        $"echo XeniaUpdater has been updated under the name {currentExecutableName}.\necho This CMD window will not appear on next start and can be closed :)\n" +
                        $"move XeniaUpdater.Latest.exe \"{currentExecutableFullPathName}\"\n" +
                        $"{currentExecutableName}\n" +
                        "del UpdateDownloaded.bat");
                }
            }
        }

        //Things to do upon launch of the program
        public void StartupTasks()
        {
            //Booleans to check for the existance of the update batch file and a newly downloaded version of the updater from GitHub
            bool updateBatExists = File.Exists("UpdateDownloaded.bat");
            bool updateEXEExists = File.Exists("XeniaUpdater.Latest.exe");

            //If the batch file exists and the new executable exists, start the batch file
            if (updateBatExists && updateEXEExists)
            {
                Process.Start("UpdateDownloaded.bat");
                Form1 f = new Form1();
                f.Close();
            }
            //Else, if the batch file does not exist but the updated executable does, delete the executable.
            //Reason behind this being that this executable is useless without the batch file.
            else if (!updateBatExists && updateEXEExists)
            {
                File.Delete("XeniaUpdater.Latest.exe");
            }
            else if (updateBatExists && !updateEXEExists)
            {
                File.Delete("UpdateDownloaded.bat");
            }
        }
    }
}
