using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Windows.Forms;

namespace XeniaUpdater_C
{
    class Helper
    {
        string currentExecutableFullPathName = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName; //Full path of the Xenia Updater executable
        string currentExecutableName = System.Diagnostics.Process.GetCurrentProcess().MainModule.ModuleName; //The current name of the Updater. (For the case that the user renames it)
        string newExeLoc = $"C:\\Users\\{Environment.UserName}\\AppData\\Local\\Temp\\XeniaUpdater.Latest.exe"; //Full path in which you will find the newly downloaded version of the updater
        string newBatLoc = $"C:\\Users\\{Environment.UserName}\\AppData\\Local\\Temp\\UpdateDownloaded.bat"; //Full path in which you will find the generated batch file used for the self updater 

        public Helper()
        {

        }

        //Creates the folders needed for a given Xenia build
        public void CreateFolders(string folderName)
        {
            try
            {
                Directory.CreateDirectory(folderName);
                Directory.CreateDirectory($"{folderName}/LastUpdate");
            }
            catch (Exception e)
            {
                LogError(e.ToString());
            }
        }

        //Open the folder in which the current running instance of Xenia Updater is located.
        public void OpenInstallFolder()
        {
            Process.Start(currentExecutableFullPathName.Replace(currentExecutableName, ""));
        }

        //Extracts the zip
        public void ExtractBuild(string folderName, string zipName)
        {
            //Deletes LICENSE file because it isn't needed and also causes issues for some reason
            try
            {
                File.Delete($"{folderName}/LICENSE");
                ZipFile.ExtractToDirectory($"{folderName}/{zipName}", folderName);
                File.Delete($"{folderName}/LICENSE");

            }
            catch (Exception e)
            {
                LogError(e.ToString());
            }
        }

        //Logs the last error the program had in a file named XeniaUpdaterLog
        //This file will not infintely be written to.
        void LogError(string e)
        {
            //FileStream fs = new FileStream("XeniaUpdaterLog.txt",FileMode.OpenOrCreate);
            StreamWriter sw = new StreamWriter("XeniaUpdaterLog.txt");
            sw.WriteLine(e.ToString());
            sw.Close();
            //fs.Close();
        }

        //Cleanup tasks to do before download and extraction of a new version
        public void PreUpdateTask(string folderName, string zipName, string ExecutableName)
        {
            string PDBName = ExecutableName.Remove(ExecutableName.Length - 4) + ".pdb";
            try
            {
                File.Delete($"{folderName}/LastUpdate/{zipName}");
                File.Move($"{folderName}/{zipName}", $"{folderName}/LastUpdate/{zipName}");
                File.Delete($"{folderName}/{ExecutableName}");
                File.Delete($"{folderName}/LICENSE");
                File.Delete($"{folderName}/xenia.log");
                File.Delete($"{folderName}/{ExecutableName}");
                File.Delete($"{folderName}/{PDBName}");
                File.Delete($"{folderName}/{PDBName}");
            }
            catch (Exception e)
            {
                LogError(e.ToString());
            }
        }

        //Start a process
        public void StartProcess(string ExecutableName, string ExeLocation)
        {
            try
            {
                Process.Start($"{ExeLocation}\\{ExecutableName}");
            }
            catch (Exception e)
            {
                MessageBox.Show($"\"{ExecutableName}.exe\" could not be started.\nThe file must be present and executable.", "Error");
                LogError(e.ToString());
            }
        }

        //Updates XeniaUpdater
        public void UpdateXeniaUpdater(string branch)
        {
            if (InternetAvailable() == true)
            {
                WebClient wc = new WebClient();
                wc.DownloadFileAsync(new Uri($"https://raw.githubusercontent.com/Chopper1337/XeniaUpdater/main/bin/{branch}/XeniaUpdater.exe"), newExeLoc);

                if (File.Exists(newExeLoc))
                {
                    MessageBox.Show($"Latest version downloaded, please restart!", "Latest version downloaded :)");

                    using (FileStream strm = File.Create(newBatLoc))
                    using (StreamWriter sw = new StreamWriter(strm))
                    {
                        //This is supposed to look like this.
                        sw.WriteLine(
$@"@echo off
rem File generated by {currentExecutableName} (XeniaUpdater), do not modify or delete :)
title Updating Xenia Updater
echo Killing {currentExecutableName}
taskkill /im {currentExecutableName}
timeout 1
echo Deleting {currentExecutableName}
del {currentExecutableFullPathName}
move {newExeLoc} {currentExecutableFullPathName}
echo XeniaUpdater has been updated under the name {currentExecutableName}.
echo This CMD window will not appear on next start and can be closed :)
{currentExecutableName}
del {newBatLoc}");
                    }
                }
            }
            else
            {
                MessageBox.Show("Internet connection not available.");
            }
        }

        //Things to do upon launch of the program
        public void StartupTasks()
        {
            //Booleans to check for the existance of the update batch file, a newly downloaded version of the updater from GitHub and a safety switch to prevent infinte cmd.exe's being started
            bool updateBatExists = File.Exists(newBatLoc);
            bool updateEXEExists = File.Exists(newExeLoc);
            bool safetySwitch = true;

            if (safetySwitch)
            {
                //If the batch file exists and the new executable exists, start the batch file
                if (updateBatExists && updateEXEExists)
                {
                    Process.Start(newBatLoc);
                    safetySwitch = false;
                }
                //Else, if the batch file does not exist but the updated executable does, delete the executable.
                //Reason behind this being that this executable is useless without the batch file.
                else if (!updateBatExists && updateEXEExists)
                {
                    File.Delete(newExeLoc);
                }
                else if (updateBatExists && !updateEXEExists)
                {
                    File.Delete(newBatLoc);
                }

            }

            //Delete log uploader, it isn't necessary to keep
            if (File.Exists("UploadFile.bat"))
            {
                File.Delete("UploadFile.bat");
                File.Delete("response.txt");
            }

        }

        //Bool to check for internet connection. Pings AppVeyor as you will need to connect to their servers eventually to use this application properly.
        //This will never ping Google, Microsoft or the like.
        public bool InternetAvailable()
        {
            try
            {
                using (var client = new WebClient())
                using (var stream = client.OpenRead("http://appveyor.com"))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }

        //Generates batch script to upload a file to tmp.ninja using CURL.
        public void UploadFile(string filename)
        {
            string text = $@"
            @echo off
            rem File generated by {currentExecutableName} (XeniaUpdater), safe to delete :)
            echo This feature requires CURL. Download it here: https://curl.se/windows/
            echo.
            echo Files are hosted on https://tmp.ninja/
            echo.
            echo Read more here: https://tmp.ninja/faq.html
            echo.
            pause
            cls
            echo Uploading log :)
            curl -i -F files[]=@{filename} https://tmp.ninja/upload.php?output=text > response.txt
            cls
            echo Your {filename} is uploaded here:
            type response.txt | findstr http
            echo.
            echo You can close this window.
            pause";

            if (File.Exists(filename))
            {
                using (FileStream strm = File.Create("UploadFile.bat"))
                using (StreamWriter sw = new StreamWriter(strm))
                {
                    sw.WriteLine(text);
                }
            }

            Process.Start("UploadFile.bat");
        }
    }
}
